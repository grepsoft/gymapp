@page "/admin/manage-instructors"
@rendermode InteractiveServer
@using gymappyt.Models
@using gymappyt.Services
@inject InstructorService InstructorService

<PageTitle>Manage Instructors</PageTitle>

<div class="max-w-4xl mx-auto py-8">
    <h2 class="text-2xl font-bold mb-6">Manage Instructors</h2>

    <!-- Add/Edit Instructor Form -->
    <div class="bg-white shadow rounded-lg p-6 mb-8">
        <h3 class="text-lg font-semibold mb-4">@((editMode ? "Edit" : "Add") + " Instructor")</h3>
        <EditForm Model="instructorModel" OnValidSubmit="HandleValidSubmit" FormName="instructorForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block text-sm font-medium mb-1">First Name</label>
                    <InputText class="input input-bordered w-full p-2 border rounded" @bind-Value="instructorModel.FirstName" />
                    <ValidationMessage For="@(() => instructorModel.FirstName)" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Last Name</label>
                    <InputText class="input input-bordered w-full p-2 border rounded" @bind-Value="instructorModel.LastName" />
                    <ValidationMessage For="@(() => instructorModel.LastName)" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Email</label>
                    <InputText class="input input-bordered w-full p-2 border rounded" @bind-Value="instructorModel.Email" />
                    <ValidationMessage For="@(() => instructorModel.Email)" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Phone</label>
                    <InputText class="input input-bordered w-full p-2 border rounded" @bind-Value="instructorModel.Phone" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Years of Experience</label>
                    <InputNumber class="input input-bordered p-2 border rounded w-full" @bind-Value="instructorModel.YearsOfExperience" />
                </div>
                <div>
                    <label class="block text-sm font-medium mb-1">Bio</label>
                    <InputTextArea class="input input-bordered p-2 border rounded w-full" @bind-Value="instructorModel.Bio" />
                </div>
            </div>
            <div class="flex items-center gap-4 mt-6">
                <button type="submit" class="btn btn-primary px-6 py-2 rounded text-white bg-blue-600 hover:bg-blue-700">
                    @(editMode ? "Update" : "Add")
                </button>
                @if (editMode)
                {
                    <button type="button" class="btn btn-secondary px-6 py-2 rounded text-gray-700 bg-gray-200 hover:bg-gray-300" @onclick="CancelEdit">
                        Cancel
                    </button>
                }
            </div>
        </EditForm>
    </div>

    <!-- Instructors Table -->
    <div class="bg-white shadow rounded-lg p-6">
        <h3 class="text-lg font-semibold mb-4">Instructors List</h3>
        <table class="min-w-full divide-y divide-gray-200">
            <thead>
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Phone</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Experience</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Active</th>
                    <th class="px-4 py-2"></th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
                @if (instructors is not null && instructors.Count > 0)
                {
                    @foreach (var instructor in instructors)
                    {
                        <tr>
                            <td class="px-4 py-2">@instructor.FullName</td>
                            <td class="px-4 py-2">@instructor.Email</td>
                            <td class="px-4 py-2">@instructor.Phone</td>
                            <td class="px-4 py-2">@instructor.YearsOfExperience</td>
                            <td class="px-4 py-2">
                                <span class="inline-block px-2 py-1 rounded text-xs @(instructor.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                    @(instructor.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td class="px-4 py-2 flex gap-2">
                                <button class="btn btn-sm bg-yellow-100 text-yellow-800 hover:bg-yellow-200 rounded px-3 py-1" @onclick="() => EditInstructor(instructor)">
                                    Edit
                                </button>
                                <button class="btn btn-sm bg-red-100 text-red-800 hover:bg-red-200 rounded px-3 py-1" @onclick="() => DeleteInstructor(instructor.Id)">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="px-4 py-4 text-center text-gray-500">No instructors found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<InstructorModel> instructors = new();
    [SupplyParameterFromForm]
    private InstructorModel instructorModel { get; set; } = new();
    private bool editMode = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstructors();
    }

    private async Task LoadInstructors()
    {
        instructors = await InstructorService.GetInstructorsAsync();
    }

    private async Task HandleValidSubmit()
    {
        bool result;

        if (editMode)
        {
            result = await InstructorService.UpdateInstructorAsync(instructorModel);
        }
        else
        {
            result = await InstructorService.AddInstructorAsync(instructorModel);
        }

        if (result)
        {
            await LoadInstructors();
            instructorModel = new InstructorModel();
            editMode = false;
        }
    }

    private void EditInstructor(InstructorModel instructor)
    {
        
        instructorModel = new InstructorModel
        {
            Id = instructor.Id,
            FirstName = instructor.FirstName,
            LastName = instructor.LastName,
            Email = instructor.Email,
            Phone = instructor.Phone,
            Bio = instructor.Bio,
            YearsOfExperience = instructor.YearsOfExperience,
            IsActive = instructor.IsActive
        };
        editMode = true;
    }

    private void CancelEdit()
    {
        instructorModel = new InstructorModel();
        editMode = false;
    }

    private async Task DeleteInstructor(int id)
    {
        await InstructorService.DeleteInstructorAsync(id);
        await LoadInstructors();
    }
}