@page "/login"
@inject gymappyt.Services.AuthService AuthService;
@inject NavigationManager NavigationManager;
@using gymappyt.Models;

<PageTitle>Login</PageTitle>

<PageTitle>Login</PageTitle>

<div class="flex items-center justify-center py-16 min-h-[70vh]">
    <div class="w-full max-w-md bg-white rounded-lg shadow-lg p-8">
        <h1 class="text-2xl font-bold text-center mb-6">Login</h1>
        <div class="w-full">
            <div class="bg-white mt-5">
                <EditForm Model="@Model" OnValidSubmit="@Handlelogin" FormName="loginForm">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(ErrorMessage))
                        {
                            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                                @ErrorMessage
                            </div>
                        }

                        <div class="mb-4">
                            <label for="email" class="block text-gray-700 text-sm font-bold mb-2">Email</label>
                            <InputText id="email" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" @bind-Value="Model.Email" />
                            <ValidationMessage For="@(() => Model.Email)" class="text-red-500" />
                        </div>

                        <div class="mb-4">
                            <label for="password" class="block text-gray-700 text-sm font-bold mb-2">Password</label>
                            <InputText type="password" id="password" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" @bind-Value="Model.Password" />
                            <ValidationMessage For="@(() => Model.Password)" class="text-red-500" />
                        </div>

                        <div class="flex flex-col gap-2">
                            <button type="submit" class="bg-app-green font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Login</button>
                            <div class="mt-6 text-center text-sm">
                                Not a member? <a href="/join" class="text-app-green underline">Join us</a>
                            </div>
                        </div>
                    </EditForm>

            </div>
        </div>
    </div>
</div>

    [SupplyParameterFromForm]
    private LoginModel Model {get; set;}

    private string? ErrorMessage;
    protected override void OnInitialized() => Model ??= new();

    private async Task Handlelogin() {
        var success = await AuthService.LoginAsync(Model.Email, Model.Password);

        if (success) {
            NavigationManager.NavigateTo("/");
        } else {
            // Handle login failure (e.g., show error message)
            Console.WriteLine("Login failed. Please check your credentials.");
            ErrorMessage = "Invalid email or password.";
        }
    }
}
@code {
    [SupplyParameterFromForm]
    private LoginModel Model {get; set;}

    private string? ErrorMessage;
    protected override void OnInitialized() => Model ??= new();


    private async Task Handlelogin() {
        var success = await AuthService.LoginAsync(Model.Email, Model.Password);

        if (success) {
            NavigationManager.NavigateTo("/");
        } else {
            // Handle login failure (e.g., show error message)
            Console.WriteLine("Login failed. Please check your credentials.");
            ErrorMessage = "Invalid email or password.";
        }
    }
}

