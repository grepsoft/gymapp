@page "/Profile"
@using System.ComponentModel.DataAnnotations;
@using gymappyt.Models;
@inject gymappyt.Services.AuthService AuthService;
@inject gymappyt.Services.UserService UserService;

<div class="min-h-screen py-16 mt-4">
    <div class="max-w-2xl mx-auto px-4">
        @if (user == null)
        {
            <div class="bg-white rounded-lg shadow-md p-8 text-center">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Access Denied</h2>
                <p class="text-gray-600 mb-6">Please log in to view and update your profile.</p>
                <a href="/login" class="bg-app-green text-white px-6 py-3 rounded-lg hover:bg-green-600 transition-colors">Login</a>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow-md p-8">
                <h2 class="text-3xl font-bold text-gray-800 mb-8">Update Profile</h2>
                
                <EditForm Model="ProfileModel" OnValidSubmit="UpdateProfile" FormName="ProfileForm" class="space-y-6">
                    <DataAnnotationsValidator />
                    
                    <div class="space-y-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                            <input type="email" value="@user.Email" disabled class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-100 text-gray-500 cursor-not-allowed" />
                            <p class="text-sm text-gray-500 mt-1">Email cannot be changed</p>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                            <InputText @bind-Value="ProfileModel!.FirstName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-app-green focus:border-transparent" />
                            <ValidationMessage For="() => ProfileModel!.FirstName" class="text-red-500 text-sm mt-1" />
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                            <InputText @bind-Value="ProfileModel!.LastName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-app-green focus:border-transparent" />
                            <ValidationMessage For="() => ProfileModel!.LastName" class="text-red-500 text-sm mt-1" />
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Membership Plan</label>
                            @user.MembershipPlan.ToString()
                            <p class="text-sm text-gray-500 mt-1">Membership plan cannot be changed</p>
                            <ValidationMessage For="() => ProfileModel!.MembershipPlan" class="text-red-500 text-sm mt-1" />
                        </div>
                        
                        <div class="pt-4">
                            <button type="submit" class="w-full bg-app-green text-white py-3 px-6 rounded-lg font-semibold hover:bg-green-600 transition-colors">
                                Update Profile
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</div>


@code {

    private UserModel? user;

    [SupplyParameterFromForm]
    private ProfileModel? ProfileModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await AuthService.GetCurrentUserAsync();
        if (user != null)
        {
            ProfileModel ??= new()
            {
                FirstName = user.FirstName,
                LastName = user.LastName,
                MembershipPlan = user.MembershipPlan,
            };
        }
    }

    private async Task UpdateProfile()
    {
        if (user == null)
        {
            throw new InvalidOperationException("User is not authenticated.");
        }

        if (ProfileModel == null)
        {
            throw new InvalidOperationException("Profile model is not initialized.");
        }

        user.FirstName = ProfileModel.FirstName;
        user.LastName = ProfileModel.LastName;
        //user.MembershipPlan = ProfileModel.MembershipPlan;

        await UserService.UpdateUserAsync(user);
    }
}
